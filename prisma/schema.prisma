// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  CUSTOMER
  VENDOR
  ADMIN
}

enum CATEGORY {
  FOOD
  GROCERIES
}

enum ORDER_STATUS {
  DECLINED
  PENDING
  PAID
  CONFIRMED
  PREPARING
  READY
  DELIVERING
  DELIVERED
}

// Schema for Users
model User {
  id                Int              @id @default(autoincrement())
  email             String           @db.VarChar(255)
  phone             String?          @db.VarChar(20)
  password          String           @db.VarChar(255)
  email_verified_at DateTime?
  phone_verified_at DateTime?
  customer_account  CustomerAccount?
  vendor_account    VendorAccount?
  role              ROLE
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  @@map("users")
}

// Schema for Vendor Accounts
model VendorAccount {
  id               Int                  @id @default(autoincrement())
  user_id          Int                  @unique
  name             String
  description      String
  opening_time     DateTime
  closing_time     DateTime
  is_open_24hours  Boolean              @default(false)
  profile_image    String?              @db.VarChar(255)
  cover_image      String?              @db.VarChar(255)
  legal_identifier String
  is_approved      Boolean              @default(false)
  category         CATEGORY
  menu_categories  VendorMenuCategory[]
  menus            VendorMenu[]
  orders           Order[]
  user             User                 @relation(fields: [user_id], references: [id])
  wallet           AccountWallet?
  address          Address?
  carts            Cart[]
  created_at       DateTime             @default(now())
  updated_at       DateTime             @updatedAt

  @@map("vendor_accounts")
}

// Schema for Customer Accounts
model CustomerAccount {
  id            Int            @id @default(autoincrement())
  user_id       Int            @unique
  firstname     String         @db.VarChar(100)
  lastname      String         @db.VarChar(100)
  profile_image String?        @db.VarChar(255)
  user          User           @relation(fields: [user_id], references: [id])
  wallet        AccountWallet?
  addresses     Address[]
  orders        Order[]
  carts         Cart[]
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt

  @@map("customer_accounts")
}

// Schema for Addresses
model Address {
  id                   Int              @id @default(autoincrement())
  vendor_user_id       Int?             @unique
  customer_user_id     Int?
  fullname             String
  phone                String           @db.VarChar(100)
  street               String
  city                 String
  postal_code          String
  state                String?
  country              String           @default("nigeria") @db.VarChar(100)
  location_description String?
  lat                  Decimal?
  long                 Decimal?
  isPrimary            Boolean          @default(false)
  created_at           DateTime         @default(now())
  updated_at           DateTime         @updatedAt
  vendor               VendorAccount?   @relation(fields: [vendor_user_id], references: [user_id])
  Customer             CustomerAccount? @relation(fields: [customer_user_id], references: [user_id])

  @@map("addresses")
}

// Schema for Categories
model VendorMenuCategory {
  id             Int           @id @default(autoincrement())
  vendor_user_id Int
  name           String
  menus          VendorMenu[]
  vendor         VendorAccount @relation(fields: [vendor_user_id], references: [user_id])
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt

  @@map("categories")
}

// Schema for VendorMenus
model VendorMenu {
  id                      Int                @id @default(autoincrement())
  vendor_user_id          Int
  vendor_menu_category_id Int
  name                    String
  description             String?
  price                   Decimal
  wait_time               Int // in minutes
  stock                   Int // optional stock count
  image                   String?            @db.VarChar(255)
  category                VendorMenuCategory @relation(fields: [vendor_menu_category_id], references: [id])
  vendor                  VendorAccount      @relation(fields: [vendor_user_id], references: [user_id])
  OrderItems              OrderItem[]
  cart_items              CartItem[]
  created_at              DateTime           @default(now())
  updated_at              DateTime           @updatedAt

  @@map("vendor_menus")
}

// Schema for Orders
model Order {
  id               Int                   @id @default(autoincrement())
  vendor_user_id   Int
  customer_user_id Int
  reference        String
  coupon_id        Int?
  deliveryTime     DateTime?
  total_price      Decimal
  discounted_price Decimal
  items            OrderItem[]
  status           ORDER_STATUS
  coupon           Coupon?               @relation(fields: [coupon_id], references: [id])
  vendor           VendorAccount         @relation(fields: [vendor_user_id], references: [user_id])
  customer         CustomerAccount       @relation(fields: [customer_user_id], references: [user_id])
  delivery_address OrderDeliveryAddress?
  created_at       DateTime              @default(now())
  updated_at       DateTime              @updatedAt

  @@map("orders")
}

// Schema for Order Items
model OrderItem {
  id          Int        @id @default(autoincrement())
  order_id    Int
  menu_id     Int
  name        String
  description String?
  price       Decimal
  wait_time   Int
  menu        VendorMenu @relation(fields: [menu_id], references: [id])
  order       Order      @relation(fields: [order_id], references: [id])
  quantity    Int
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("order_items")
}

// Schema for Addresses
model OrderDeliveryAddress {
  id                   Int      @id @default(autoincrement())
  order_id             Int      @unique
  fullname             String
  phone                String   @db.VarChar(100)
  street               String
  city                 String
  postal_code          String
  state                String?
  country              String   @default("nigeria") @db.VarChar(100)
  location_description String?
  lat                  Decimal?
  long                 Decimal?
  order                Order    @relation(fields: [order_id], references: [id])
  created_at           DateTime @default(now())
  updated_at           DateTime @updatedAt

  @@map("order_delivery_address")
}

// Schema for Cart
model Cart {
  id               Int             @id @default(autoincrement())
  customer_user_id Int
  vendor_user_id   Int
  items            CartItem[]
  customer         CustomerAccount @relation(fields: [customer_user_id], references: [user_id])
  vendor           VendorAccount   @relation(fields: [vendor_user_id], references: [user_id])
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  @@map("carts")
}

// Schema for Cart Items
model CartItem {
  id               Int        @id @default(autoincrement())
  customer_user_id Int
  menu_id          Int
  cart_id          Int
  quantity         Int
  name             String
  description      String?
  price            Decimal
  wait_time        Int
  cart             Cart       @relation(fields: [cart_id], references: [id])
  menu             VendorMenu @relation(fields: [menu_id], references: [id])
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@map("cart_items")
}

// Schema for Coupon Codes
model Coupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  orders     Order[]
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("coupons")
}

model AccountWallet {
  id                Int              @id @default(autoincrement())
  customer_user_id  Int?             @unique
  vendor_user_id    Int?             @unique
  available_balance Decimal?         @default("0.00")
  currency          String?          @default("ngn") @db.VarChar(20)
  customer          CustomerAccount? @relation(fields: [customer_user_id], references: [user_id])
  vendor            VendorAccount?   @relation(fields: [vendor_user_id], references: [user_id])
  created_at        DateTime         @default(now())
  updated_at        DateTime         @updatedAt

  @@map("account_wallets")
}

model AccessToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String   @db.VarChar(255)
  expires_at DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("access_tokens")
}
